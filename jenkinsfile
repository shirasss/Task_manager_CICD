pipeline {
    agent any
    environment {
        ACR_NAME = 'shirarepo'
        SERVICE_PRINCIPAL_CREDENTIALS_ID = 'AzureServicePrincipal'
        SERVICE_PRINCIPAL_SECRET_ID = '45d0b2e8-3d09-4cc3-825e-fc54ba8851a4'
    }
    stages {
        stage('Build') {
            steps {
                echo 'Building'
                echo 'Stopping and removing containers...'
                sh "docker-compose down"
                sleep time: 10, unit: 'SECONDS'
                echo 'Building and running containers...'
                sh "docker-compose up --build -d"
        // Log in to Azure Container Registry using service principal
                withCredentials([usernamePassword(credentialsId: SERVICE_PRINCIPAL_CREDENTIALS_ID, usernameVariable: 'SP_USERNAME', passwordVariable: 'SP_PASSWORD')]) {
                sh "docker login -u $SP_USERNAME -p $SP_PASSWORD $ACR_NAME.azurecr.io"
                }
                sh "docker tag mongo:latest shirarepo.azurecr.io/mongo:latest"
        // Push the Docker image to ACR
                sh "docker push shirarepo.azurecr.io/mongo:latest"                   
                }
            }
        }
    }

        post {
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
        always {
        sh "docker system prune -af"
        }
    }
    }

    // Helper functions

  
}


// pipeline {
//     agent any
//     stages {
//         stage('Build') {
//             steps {
//                 echo 'Building'
//                 script {
//                     echo 'Stopping and removing containers and removing unused images...'
//                     sh "docker-compose down"
//                     sleep time: 10, unit: 'SECONDS'
//                     // sh 'docker rmi mongo:latest  || true'
//                     // sh 'docker rmi node_image:latest  || true'
//                     sh "docker-compose up --build -d"
//                 }
//             }
//         }
//     }
    // post {
    //     success {
    //         echo 'Pipeline succeeded!'
    //     }
    //     failure {
    //         echo 'Pipeline failed!'
    //     }
    //     always {
    //     sh "docker system prune -af"
    //     }
    // }
// }
